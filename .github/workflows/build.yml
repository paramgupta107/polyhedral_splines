name: Build and Deploy PolyhedralSplines

on:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # ###############################################################
  # # LINUX BUILDS
  # ###############################################################
  # build-linux-shared:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: sudo apt-get update && sudo apt-get install -y build-essential cmake zip
  #     - run: |
  #         mkdir -p build/linux-shared install/linux-shared
  #         cmake -B build/linux-shared -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON
  #         cmake --build build/linux-shared --target PolyhedralSplinesLib -- -j$(nproc)
  #         cmake --install build/linux-shared --prefix install/linux-shared
  #         cd install
  #         mv linux-shared PolyhedralSplinesLib-linux-shared
  #         zip -r ../PolyhedralSplinesLib-linux-shared.zip PolyhedralSplinesLib-linux-shared
  #         cd ..
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: PolyhedralSplinesLib-linux-shared
  #         path: PolyhedralSplinesLib-linux-shared.zip

  # build-linux-static:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: sudo apt-get update && sudo apt-get install -y build-essential cmake zip
  #     - run: |
  #         mkdir -p build/linux-static install/linux-static
  #         cmake -B build/linux-static -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF
  #         cmake --build build/linux-static --target PolyhedralSplinesLib -- -j$(nproc)
  #         cmake --install build/linux-static --prefix install/linux-static
  #         cd install
  #         mv linux-static PolyhedralSplinesLib-linux-static
  #         zip -r ../PolyhedralSplinesLib-linux-static.zip PolyhedralSplinesLib-linux-static
  #         cd ..
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: PolyhedralSplinesLib-linux-static
  #         path: PolyhedralSplinesLib-linux-static.zip

  # build-linux-exe:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: sudo apt-get update && sudo apt-get install -y build-essential cmake
  #     - run: |
  #         mkdir -p build/linux-exe
  #         cmake -B build/linux-exe -DCMAKE_BUILD_TYPE=Release
  #         cmake --build build/linux-exe --target PolyhedralSplines -- -j$(nproc)
  #         mv build/linux-exe/PolyhedralSplines build/linux-exe/PolyhedralSplines-linux
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: PolyhedralSplines-linux
  #         path: build/linux-exe/PolyhedralSplines-linux

  # ###############################################################
  # # WINDOWS BUILDS (MinGW)
  # ###############################################################
  # build-windows-shared:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: sudo apt-get update && sudo apt-get install -y cmake g++-mingw-w64-x86-64-posix gcc-mingw-w64-x86-64-posix zip
  #     - run: |
  #         mkdir -p build/windows-shared install/windows-shared
  #         cmake -B build/windows-shared -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc-posix -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++-posix
  #         cmake --build build/windows-shared --target PolyhedralSplinesLib -- -j$(nproc)
  #         cmake --install build/windows-shared --prefix install/windows-shared
  #         cd install
  #         mv windows-shared PolyhedralSplinesLib-windows-shared
  #         zip -r ../PolyhedralSplinesLib-windows-shared.zip PolyhedralSplinesLib-windows-shared
  #         cd ..
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: PolyhedralSplinesLib-windows-shared
  #         path: PolyhedralSplinesLib-windows-shared.zip

  # build-windows-static:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: sudo apt-get update && sudo apt-get install -y cmake g++-mingw-w64-x86-64-posix gcc-mingw-w64-x86-64-posix zip
  #     - run: |
  #         mkdir -p build/windows-static install/windows-static
  #         cmake -B build/windows-static -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc-posix -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++-posix
  #         cmake --build build/windows-static --target PolyhedralSplinesLib -- -j$(nproc)
  #         cmake --install build/windows-static --prefix install/windows-static
  #         cd install
  #         mv windows-static PolyhedralSplinesLib-windows-static
  #         zip -r ../PolyhedralSplinesLib-windows-static.zip PolyhedralSplinesLib-windows-static
  #         cd ..
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: PolyhedralSplinesLib-windows-static
  #         path: PolyhedralSplinesLib-windows-static.zip

  # build-windows-exe:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: sudo apt-get update && sudo apt-get install -y cmake g++-mingw-w64-x86-64-posix gcc-mingw-w64-x86-64-posix
  #     - run: |
  #         mkdir -p build/windows-exe
  #         cmake -B build/windows-exe -DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc-posix -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++-posix
  #         cmake --build build/windows-exe --target PolyhedralSplines -- -j$(nproc)
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: PolyhedralSplines-windows
  #         path: build/windows-exe/PolyhedralSplines.exe

  # ###############################################################
  # # MACOS BUILDS (osxcross)
  # ###############################################################
  # build-macos-shared:
  #   runs-on: ubuntu-latest
  #   container: joseluisq/docker-osxcross:1.0.0-beta.2
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: apt-get update && apt-get install -y zip
  #     - run: |
  #         mkdir -p build/macos-shared install/macos-shared
  #         cmake -B build/macos-shared -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_SYSTEM_PROCESSOR=arm64 -DCMAKE_C_COMPILER=$(xcrun -f clang) -DCMAKE_CXX_COMPILER=$(xcrun -f clang++) -DCMAKE_C_FLAGS="-arch arm64" -DCMAKE_CXX_FLAGS="-arch arm64"
  #         cmake --build build/macos-shared --target PolyhedralSplinesLib -- -j$(nproc)
  #         cmake --install build/macos-shared --prefix install/macos-shared
  #         cd install
  #         mv macos-shared PolyhedralSplinesLib-macos-shared
  #         zip -r ../PolyhedralSplinesLib-macos-shared.zip PolyhedralSplinesLib-macos-shared
  #         cd ..
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: PolyhedralSplinesLib-macos-shared
  #         path: PolyhedralSplinesLib-macos-shared.zip

  ###############################################################
  # BUILD AND DEPLOY (WASM + DOCS)
  ###############################################################
  build-and-deploy-wasm:
    runs-on: ubuntu-latest
    container: emscripten/emsdk

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: apt-get update && apt-get install -y doxygen graphviz

      - name: Build WebAssembly + Docs
        run: |
          emcmake cmake -B build -DBUILD_DOCS=ON
          cmake --build build

      - name: Combine docs and webapp
        run: |
          mkdir -p Doc/html/webapp/build
          cp index.html Doc/html/webapp/
          cp build/*.js build/*.wasm Doc/html/webapp/build/

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload combined docs and webapp as artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./Doc/html  # this folder now includes Doxygen + webapp

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4