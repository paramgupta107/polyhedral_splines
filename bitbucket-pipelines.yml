image: emscripten/emsdk

pipelines:
  branches:
    master:
      - parallel:

          ######################################################
          # LINUX BUILDS
          ######################################################
          - step:
              name: Build Linux (Shared)
              script:
                - apt-get update && apt-get install -y build-essential cmake zip
                - mkdir -p build/linux-shared install/linux-shared
                - cmake -B build/linux-shared -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON
                - cmake --build build/linux-shared --target PolyhedralSplinesLib -- -j$(nproc)
                - cmake --install build/linux-shared --prefix install/linux-shared
                - cd install
                - mv linux-shared PolyhedralSplinesLib-linux-shared
                - zip -r ../PolyhedralSplinesLib-linux-shared.zip PolyhedralSplinesLib-linux-shared
                - cd ..
              artifacts:
                - PolyhedralSplinesLib-linux-shared.zip

          - step:
              name: Build Linux (Static)
              script:
                - apt-get update && apt-get install -y build-essential cmake zip
                - mkdir -p build/linux-static install/linux-static
                - cmake -B build/linux-static -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF
                - cmake --build build/linux-static --target PolyhedralSplinesLib -- -j$(nproc)
                - cmake --install build/linux-static --prefix install/linux-static
                - cd install
                - mv linux-static PolyhedralSplinesLib-linux-static
                - zip -r ../PolyhedralSplinesLib-linux-static.zip PolyhedralSplinesLib-linux-static
                - cd ..
              artifacts:
                - PolyhedralSplinesLib-linux-static.zip

          - step:
              name: Build Linux Executable
              script:
                - apt-get update && apt-get install -y build-essential cmake
                - mkdir -p build/linux-exe
                - cmake -B build/linux-exe -DCMAKE_BUILD_TYPE=Release
                - cmake --build build/linux-exe --target PolyhedralSplines -- -j$(nproc)
                - mv build/linux-exe/PolyhedralSplines build/linux-exe/PolyhedralSplines-linux

              artifacts:
                - build/linux-exe/PolyhedralSplines-linux

          ######################################################
          # WINDOWS BUILDS (MinGW)
          ######################################################
          - step:
              name: Build Windows (Shared)
              script:
                - apt-get update && apt-get install -y cmake g++-mingw-w64-x86-64-posix gcc-mingw-w64-x86-64-posix zip
                - mkdir -p build/windows-shared install/windows-shared
                - cmake -B build/windows-shared -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc-posix -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++-posix
                - cmake --build build/windows-shared --target PolyhedralSplinesLib -- -j$(nproc)
                - cmake --install build/windows-shared --prefix install/windows-shared
                - cd install
                - mv windows-shared PolyhedralSplinesLib-windows-shared
                - zip -r ../PolyhedralSplinesLib-windows-shared.zip PolyhedralSplinesLib-windows-shared
                - cd ..
              artifacts:
                - PolyhedralSplinesLib-windows-shared.zip

          - step:
              name: Build Windows (Static)
              script:
                - apt-get update && apt-get install -y cmake g++-mingw-w64-x86-64-posix gcc-mingw-w64-x86-64-posix zip
                - mkdir -p build/windows-static install/windows-static
                - cmake -B build/windows-static -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc-posix -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++-posix
                - cmake --build build/windows-static --target PolyhedralSplinesLib -- -j$(nproc)
                - cmake --install build/windows-static --prefix install/windows-static
                - cd install
                - mv windows-static PolyhedralSplinesLib-windows-static
                - zip -r ../PolyhedralSplinesLib-windows-static.zip PolyhedralSplinesLib-windows-static
                - cd ..
              artifacts:
                - PolyhedralSplinesLib-windows-static.zip

          - step:
              name: Build Windows Executable
              script:
                - apt-get update && apt-get install -y cmake g++-mingw-w64-x86-64-posix gcc-mingw-w64-x86-64-posix
                - mkdir -p build/windows-exe
                - cmake -B build/windows-exe -DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc-posix -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++-posix
                - cmake --build build/windows-exe --target PolyhedralSplines -- -j$(nproc)
              artifacts:
                - build/windows-exe/PolyhedralSplines.exe

          ######################################################
          # MACOS BUILDS (osxcross)
          ######################################################
          - step:
              name: Build macOS (Shared)
              image: joseluisq/docker-osxcross:1.0.0-beta.2
              script:
                - apt-get update && apt-get install -y zip
                - mkdir -p build/macos-shared install/macos-shared
                - cmake -B build/macos-shared -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_SYSTEM_PROCESSOR=arm64 -DCMAKE_C_COMPILER=$(xcrun -f clang) -DCMAKE_CXX_COMPILER=$(xcrun -f clang++) -DCMAKE_C_FLAGS="-arch arm64" -DCMAKE_CXX_FLAGS="-arch arm64"
                - cmake --build build/macos-shared --target PolyhedralSplinesLib -- -j$(nproc)
                - cmake --install build/macos-shared --prefix install/macos-shared
                - cd install
                - mv macos-shared PolyhedralSplinesLib-macos-shared
                - zip -r ../PolyhedralSplinesLib-macos-shared.zip PolyhedralSplinesLib-macos-shared
                - cd ..
              artifacts:
                - PolyhedralSplinesLib-macos-shared.zip

          - step:
              name: Build macOS (Static)
              image: joseluisq/docker-osxcross:1.0.0-beta.2
              script:
                - apt-get update && apt-get install -y zip
                - mkdir -p build/macos-static install/macos-static
                - cmake -B build/macos-static -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_SYSTEM_PROCESSOR=arm64 -DCMAKE_C_COMPILER=$(xcrun -f clang) -DCMAKE_CXX_COMPILER=$(xcrun -f clang++) -DCMAKE_C_FLAGS="-arch arm64" -DCMAKE_CXX_FLAGS="-arch arm64"
                - cmake --build build/macos-static --target PolyhedralSplinesLib -- -j$(nproc)
                - cmake --install build/macos-static --prefix install/macos-static
                - cd install
                - mv macos-static PolyhedralSplinesLib-macos-static
                - zip -r ../PolyhedralSplinesLib-macos-static.zip PolyhedralSplinesLib-macos-static
                - cd ..
              artifacts:
                - PolyhedralSplinesLib-macos-static.zip

          - step:
              name: Build macOS Executable
              image: joseluisq/docker-osxcross:1.0.0-beta.2
              script:
                - apt-get update && apt-get install -y zip
                - mkdir -p build/macos-exe
                - cmake -B build/macos-exe -DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_SYSTEM_PROCESSOR=arm64 -DCMAKE_C_COMPILER=$(xcrun -f clang) -DCMAKE_CXX_COMPILER=$(xcrun -f clang++) -DCMAKE_C_FLAGS="-arch arm64" -DCMAKE_CXX_FLAGS="-arch arm64"
                - cmake --build build/macos-exe --target PolyhedralSplines -- -j$(nproc)
                - mv build/macos-exe/PolyhedralSplines build/macos-exe/PolyhedralSplines-macos
              artifacts:
                - build/macos-exe/PolyhedralSplines-macos

          ##########################################################
          # BUILD AND DEPLOY WASM/DOCS
          ##########################################################
          - step:
              name: Build and Deploy WebAssembly + Docs
              script:
                - apt-get update && apt-get install -y sshpass doxygen graphviz

                # Deploy WebAssembly + Docs (your original section)
                - sshpass -p "$SERVER_PASS" ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "echo 'âœ… SSH connection successful'"
                - emcmake cmake -B build -DBUILD_DOCS=ON
                - cmake --build build
                - sshpass -p "$SERVER_PASS" ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "rm -rf $SERVER_PATH && mkdir -p $SERVER_PATH"
                - sshpass -p "$SERVER_PASS" scp -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no index.html $SERVER_USER@$SERVER_HOST:$SERVER_PATH
                - sshpass -p "$SERVER_PASS" ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "rm -rf $SERVER_PATH/build && mkdir -p $SERVER_PATH/build"
                - sshpass -p "$SERVER_PASS" scp -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no build/*.js build/*.wasm $SERVER_USER@$SERVER_HOST:$SERVER_PATH/build
                - sshpass -p "$SERVER_PASS" ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "rm -rf $DOC_PATH && mkdir -p $DOC_PATH"
                - sshpass -p "$SERVER_PASS" scp -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no -r Doc/html/* $SERVER_USER@$SERVER_HOST:$DOC_PATH
                - echo "âœ… Deployment finished (App + Docs)"
      ##########################################################
      # SERIAL STEP: UPLOAD ALL BUILDS
      ##########################################################
      - step:
          name: Upload All Builds
          script:
            # Upload native builds
            - apt-get update && apt-get install -y sshpass
            - sshpass -p "$SERVER_PASS" ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "rm -rf $DOC_PATH/dist && mkdir -p $DOC_PATH/dist"
            - sshpass -p "$SERVER_PASS" scp -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no PolyhedralSplinesLib-*.zip $SERVER_USER@$SERVER_HOST:$DOC_PATH/dist
            - sshpass -p "$SERVER_PASS" scp -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no build/linux-exe/PolyhedralSplines-linux $SERVER_USER@$SERVER_HOST:$DOC_PATH/dist
            - sshpass -p "$SERVER_PASS" scp -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no build/windows-exe/PolyhedralSplines.exe $SERVER_USER@$SERVER_HOST:$DOC_PATH/dist
            - sshpass -p "$SERVER_PASS" scp -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no build/macos-exe/PolyhedralSplines-macos $SERVER_USER@$SERVER_HOST:$DOC_PATH/dist
            - sshpass -p "$SERVER_PASS" ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST touch $DOC_PATH/dist/.htaccess && printf "Options +Indexes\nIndexOptions FancyIndexing NameWidth=*\nIndexIgnore .htaccess\n" > $DOC_PATH/dist/.htaccess && chmod 644 $DOC_PATH/dist/.htaccess && chmod 755 $DOC_PATH/dist
            - echo "âœ… Upload complete to $DOC_PATH/dist"
